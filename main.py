# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mrz.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from   mrz.generator.td3 import TD3CodeGenerator
from   PyQt5 import QtCore, QtWidgets
from   mrz.generator.td1 import TD1CodeGenerator
import re
from   gui import Ui_MainWindow
import os

FILE = 'setting.txt'

class ExampleApp(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.ontop.stateChanged.connect(self.on_top)
        self.START.clicked.connect(self.click)
        self.restore_vars()

    def on_top(self, state):
        if state:
            self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        else:
            self.setWindowFlags(QtCore.Qt.Window)
        self.show()

    def click(self):
        iso_3166_1 = ['AFG', 'ALB', 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW',
                      'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL', 'BLZ', 'BEN', 'BMU',
                      'BTN', 'BOL', 'BOL', 'BIH', 'BWA', 'BVT', 'BRA', 'IOT', 'BRN', 'BRN', 'BGR', 'BFA',
                      'BDI', 'KHM', 'CMR', 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK',
                      'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'CIV', 'HRV', 'CUB', 'CYP', 'CZE',
                      'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY', 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK',
                      'FRO', 'FJI', 'FIN', 'FRA', 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA',
                      'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB', 'GUY', 'HTI',
                      'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN',
                      'ISR', 'ITA', 'JAM', 'JPN', 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KOR',
                      'KWT', 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LBY', 'LIE', 'LTU', 'LUX',
                      'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MTQ', 'MRT', 'MUS',
                      'MYT', 'MEX', 'FSM', 'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'MMR',
                      'NAM', 'NRU', 'NPL', 'NLD', 'ANT', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK',
                      'MNP', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL', 'PCN',
                      'POL', 'PRT', 'PRI', 'QAT', 'REU', 'ROU', 'RUS', 'RUS', 'RWA', 'SHN', 'KNA', 'LCA',
                      'SPM', 'VCT', 'VCT', 'VCT', 'WSM', 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE',
                      'SGP', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'SSD', 'ESP', 'LKA', 'SDN', 'SUR',
                      'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TWN', 'TJK', 'TZA', 'THA', 'TLS', 'TGO',
                      'TKL', 'TON', 'TTO', 'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR',
                      'USA', 'UMI', 'URY', 'UZB', 'VUT', 'VEN', 'VEN', 'VNM', 'VNM', 'VGB', 'VIR', 'WLF',
                      'ESH', 'YEM', 'ZMB', 'ZWE']

        document_type = 'P'
        document_type_id = 'ID'
        optional_data = self.Extra.text()
        given_names = self.Name.text()
        if '-' in given_names:
            given_names.replace('-',' ')
        surname = self.Surname.text()
        if '-' in surname:
            surname.replace('-', ' ')
        birth_date = self.DOB.text()
        expiry_date = self.Exp.text()
        info = '    ERROR: Please enter valid data \n             check all setting and fields!'
        date_pattern = re.compile(r'^(0[1-9]|[12][0-9]|3[01])(\.|/)(0[1-9]|1[0-2])(\2)(19|20)\d{2}$')
        if not date_pattern.match(birth_date):
            return self.label.setText(str(info))

        birth_date = birth_date.replace('.', '')
        birth_date = birth_date.replace('/', '')
        expiry_date = expiry_date.replace('.', '')
        expiry_date = expiry_date.replace('/', '')
        birth_date_dm = birth_date[0:4]
        expiry_date_dm = expiry_date[0:4]
        birth_date_y =  birth_date[4:8]
        expiry_date_y = expiry_date[4:8]

        if (int(birth_date_y) % 4 == 0) and (int(birth_date_y) % 100 != 0) or (int(birth_date_y) % 400 == 0):
            leap_year_b = ['3002', '3102', '3104', '3106', '3109', '3111']
        else:
            leap_year_b = ['2902','3002', '3102', '3104', '3106', '3109', '3111']

        if (int(expiry_date_y) % 4 == 0) and (int(expiry_date_y) % 100 != 0) or (int(expiry_date_y) % 400 == 0):
            leap_year_e = ['3002', '3102', '3104', '3106', '3109', '3111']
        else:
            leap_year_e = ['2902','3002', '3102', '3104', '3106', '3109', '3111']

        if birth_date_dm in leap_year_b:
            return self.label.setText(str(info))
        if expiry_date_dm in leap_year_e:
            return self.label.setText(str(info))


        birth_date = birth_date[6:8] + birth_date [2:4] + birth_date[0:2]
        expiry_date = expiry_date[6:8] + expiry_date[2:4] + expiry_date[0:2]
        document_number = self.Numb.text()
        country_code = self.Issuing.text()
        country_code = country_code.upper()
        nationality = self.Nation.text()
        nationality = nationality.upper()

        if country_code  not in iso_3166_1:
            return self.label.setText(str(info))

        if nationality not in iso_3166_1:
            return self.label.setText(str(info))

        if self.male.isChecked():
            sex = 'M'
        else:
            sex = 'F'

        if self.Unspecified.isChecked():
            sex = 'X'

        if len(country_code) < 3:
            return self.label.setText(str(info))
        elif len(nationality) < 3:
            return self.label.setText(str(info))
        elif len(birth_date) < 6:
            return self.label.setText(str(info))
        elif len(expiry_date) < 6:
            return self.label.setText(str(info))
        elif len(document_number) < 5:
            return self.label.setText(str(info))
        elif len(given_names) < 1:
            return self.label.setText(str(info))
        elif len(surname) < 1:
            return self.label.setText(str(info))

        code = TD3CodeGenerator(
                       document_type,           # Document type   Normally 'P' for passports
                       country_code,            # Country         3 letters code or country name
                       surname,                 # Surname         Special characters will be transliterated
                       given_names,             # Given name(s)   Special characters will be transliterated
                       document_number,         # Document number
                       nationality,             # Nationality
                       birth_date,              # Birth date      YYMMDD
                       sex,                     # Gender          Male: 'M', Female: 'F' or Undefined
                       expiry_date,             # Expiry date     YYMMDD
                       optional_data
        )

        code_id = TD1CodeGenerator(
                       document_type_id,        # Document type   Normally 'I' or 'ID' for id cards
                       country_code,            # Country         3 letters code or country name
                       document_number,         # Document number
                       birth_date,              # Birth date      YYMMDD
                       sex,                     # Gender          Male: 'M', Female: 'F' or Undefined
                       expiry_date,             # Expiry date     YYMMDD
                       nationality,             # Nationality
                       surname,                 # Surname         Special characters will be transliterated
                       given_names,             # Given name(s)   Special characters will be transliterated
                       optional_data
        )

        if self.chooseid.isChecked():

            self.label.setText(str(code_id))
        else:
            self.label.setText(str(code))

        self.signature.setText(str.title(surname))

        if birth_date[2:4] in ('10' , '11' , '12'):
            i = (int(birth_date[2:4]) - 1)
        else:
            i = (int(birth_date[3:4]) - 1)

        mouth_tuple = ['JAN /JAN', 'FEB /FEV', 'MAR /MARS', 'APR /AVR', 'MAY /MAI', 'JUN /JUIN', 'JUL /JUIL', 'AUG /AOUT', 'SEP /SEPT', 'OCT /OCT', 'NOV /NOV', 'DEC /DEC']
        self.mounth.setText(mouth_tuple[i])
        self.save_vars()


    def save_vars(self):
        f = open(FILE, 'w')
        f.write(self.Name.text() + ',')
        f.write(self.Surname.text() + ',')
        f.write(self.DOB.text() + ',')
        f.write(self.Nation.text() + ',')
        f.write(self.Issuing.text() + ',')
        f.write(self.Exp.text() + ',')
        f.write(self.Extra.text() + ',')
        f.write(self.Numb.text())
        f.close()
    def restore_vars(self):
        if os.path.isfile(FILE):

            f = open(FILE, 'r')
            all_val = f.readline()
            all_split = all_val.split(',')
            if len(all_split) == 8:
                self.Name.setText(all_split[0])
                self.Surname.setText(all_split[1])
                self.DOB.setText(all_split[2])
                self.Nation.setText(all_split[3])
                self.Issuing.setText(all_split[4])
                self.Exp.setText(all_split[5])
                self.Extra.setText(all_split[6])
                self.Numb.setText(all_split[7])
            f.close()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    window = ExampleApp()
    window.show()
    sys.exit(app.exec_())



